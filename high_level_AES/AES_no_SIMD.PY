# Constantes de AES
S_BOX = [
    # 0     1    2    3    4    5    6    7    8    9    A    B    C    D    E    F
    [0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76],
    [0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0],
    [0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15],
    [0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75],
    [0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84],
    [0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf],
    [0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8],
    [0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2],
    [0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73],
    [0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb],
    [0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79],
    [0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08],
    [0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a],
    [0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e],
    [0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf],
    [0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16]
]

MIX_COLUMNS_MATRIX = [
    [0x02, 0x03, 0x01, 0x01],
    [0x01, 0x02, 0x03, 0x01],
    [0x01, 0x01, 0x02, 0x03],
    [0x03, 0x01, 0x01, 0x02]
]

# Rcon valores para generación de claves
RCON = [
    0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36
]


def sub_bytes(state):
    """Aplica la sustitución de bytes usando la tabla S-Box."""
    for i in range(4):
        for j in range(4):
            byte = state[i][j]
            state[i][j] = S_BOX[byte >> 4][byte & 0x0F]
    return state


def shift_rows(state):
    """Rota las filas del estado según la operación ShiftRows."""
    state[1] = state[1][1:] + state[1][:1]
    state[2] = state[2][2:] + state[2][:2]
    state[3] = state[3][3:] + state[3][:3]
    return state

def galois_mult(a, b):
    """Multiplicación en el campo de Galois"""
    p = 0
    for _ in range(8):
        if b & 1:
            p ^= a
        carry = a & 0x80
        a <<= 1
        if carry:
            a ^= 0x1b
        b >>= 1
    return p % 256

def mix_columns(state):
    """Aplica la transformación MixColumns correctamente."""
    for i in range(4):
        a = state[0][i]
        b = state[1][i]
        c = state[2][i]
        d = state[3][i]

        state[0][i] = galois_mult(a, 0x02) ^ galois_mult(b, 0x03) ^ galois_mult(c, 0x01) ^ galois_mult(d, 0x01)
        state[1][i] = galois_mult(a, 0x01) ^ galois_mult(b, 0x02) ^ galois_mult(c, 0x03) ^ galois_mult(d, 0x01)
        state[2][i] = galois_mult(a, 0x01) ^ galois_mult(b, 0x01) ^ galois_mult(c, 0x02) ^ galois_mult(d, 0x03)
        state[3][i] = galois_mult(a, 0x03) ^ galois_mult(b, 0x01) ^ galois_mult(c, 0x01) ^ galois_mult(d, 0x02)
    
    return state


def add_round_key(state, round_key):
    """Aplica la clave de la ronda al estado actual."""
    for i in range(4):
        for j in range(4):
            state[i][j] ^= round_key[j][i]
    return state


def rot_word(word):
    """Rota una palabra (lista de 4 bytes) 1 byte hacia la izquierda."""
    return word[1:] + word[:1]

def sub_word(word):
    """Aplica la sustitución de bytes a una palabra usando la tabla S-Box."""
    return [S_BOX[b >> 4][b & 0x0F] for b in word]


def key_expansion(key):
    """Genera las claves de ronda a partir de la clave inicial (expansión de clave)."""
    key_symbols = [ord(symbol) for symbol in key]
    assert len(key_symbols) == 16, "La clave debe ser de 16 bytes para AES-128."
    w = [[key_symbols[4*i:4*(i+1)] for i in range(4)]]

    for i in range(1, 11):
        temp = w[i - 1]
        col_0 = sub_word(rot_word(temp[3]))
        col_0[0] ^= RCON[i - 1]
        col_0 = xor_lists(temp[0], col_0)
        col_1 = xor_lists(temp[1], col_0)
        col_2 = xor_lists(temp[2], col_1)
        col_3 = xor_lists(temp[3], col_2)
        new_key = [col_0, col_1, col_2, col_3]
        w.append(new_key)
        
    round_keys = w
    return round_keys

def xor_lists(list1, list2):
    """Realiza XOR entre dos listas de igual longitud."""
    return [a ^ b for a, b in zip(list1, list2)]

def aes_encrypt(plaintext, key):
    """Cifra el texto plano de 128 bits usando la clave AES de 128 bits."""
    state = [[ord(plaintext[row + 4 * col]) for col in range(4)] for row in range(4)]
    round_keys = key_expansion(key)
    
    # Primera ronda
    state = add_round_key(state, round_keys[0])

    # Rondas bucle
    for round in range(1, 10):
        state = sub_bytes(state)
        state = shift_rows(state)
        state = mix_columns(state)
        state = add_round_key(state, round_keys[round])
        
        
    # Última ronda
    state = sub_bytes(state)
    state = shift_rows(state)
    state = add_round_key(state, round_keys[10])
    
    ciphertext = ''.join([chr(state[row][col]) for col in range(4) for row in range(4)])
    
    
    return ciphertext

def print_ciphertext_in_hex(ciphertext):
    """Imprime el texto cifrado en formato hexadecimal, sin espacios."""
    hex_output = ''.join(f'{ord(char):02x}' for char in ciphertext)
    print(hex_output)

plaintext = "Two One Nine Two"
key = "Thats my Kung Fu"

# Cifrar el texto plano
ciphertext = aes_encrypt(plaintext, key)
print("Texto Cifrado!")
print_ciphertext_in_hex(ciphertext)