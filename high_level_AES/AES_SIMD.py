# S-Box y la inversa de la S-Box (tablas completas)
S_BOX = [
    0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
    0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
    0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
    0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
    0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
    0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
    0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
    0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
    0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
    0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
    0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
    0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
    0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
    0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
    0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
    0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16
]

INV_S_BOX = [
    0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
    0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
    0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
    0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
    0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
    0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
    0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
    0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
    0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
    0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
    0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
    0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
    0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
    0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
    0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
]

# Funciones de sustitución de bytes usando S-Box
def sub_bytes(state):
    return [S_BOX[byte] for byte in state]

def inv_sub_bytes(state):
    return [INV_S_BOX[byte] for byte in state]

# Función de ShiftRows
def shift_rows(state):
    # Transforma la lista de 16 bytes en una matriz de 4x4 para rotar filas
    matrix = [state[i:i+4] for i in range(0, len(state), 4)]

    # Shift row 1 (index 1)
    matrix[1] = matrix[1][1:] + matrix[1][:1]
    # Shift row 2 (index 2)
    matrix[2] = matrix[2][2:] + matrix[2][:2]
    # Shift row 3 (index 3)
    matrix[3] = matrix[3][3:] + matrix[3][:3]

    # Convertir la matriz de vuelta en una lista plana
    return [byte for row in matrix for byte in row]

# Función de invShiftRows
def inv_shift_rows(state):
    # Transforma la lista de 16 bytes en una matriz de 4x4 para rotar filas
    matrix = [state[i:i+4] for i in range(0, len(state), 4)]

    # Inversa del Shift row 1 (index 1)
    matrix[1] = matrix[1][-1:] + matrix[1][:-1]
    # Inversa del Shift row 2 (index 2)
    matrix[2] = matrix[2][-2:] + matrix[2][:-2]
    # Inversa del Shift row 3 (index 3)
    matrix[3] = matrix[3][-3:] + matrix[3][:-3]

    # Convertir la matriz de vuelta en una lista plana
    return [byte for row in matrix for byte in row]

# Función de XOR (AddRoundKey)
def add_round_key(state, key):
    return [state[i] ^ key[i] for i in range(16)]

# Expansión de la clave simplificada (sin uso de NumPy)
def key_expansion(key):
    expanded_key = list(key)
    for i in range(16, 176):
        expanded_key.append(expanded_key[i - 16] ^ expanded_key[i - 1])
    return expanded_key

# Cifrado AES en modo ECB para un bloque de 16 bytes
def aes_encrypt_block(plaintext, key):
    state = list(plaintext)  # Convertir el texto plano en una lista de bytes
    expanded_key = key_expansion(key)  # Expansión de la clave

    # Primera ronda: AddRoundKey
    state = add_round_key(state, expanded_key[:16])

    # 9 rondas de sustitución, rotación y XOR
    for round in range(1, 10):
        state = sub_bytes(state)
        state = shift_rows(state)
        state = add_round_key(state, expanded_key[round*16:(round+1)*16])

    # Última ronda (sin mezcla de columnas en esta implementación básica)
    state = sub_bytes(state)
    state = shift_rows(state)
    state = add_round_key(state, expanded_key[160:176])

    return state

# Descifrado AES en modo ECB para un bloque de 16 bytes
def aes_decrypt_block(ciphertext, key):
    state = list(ciphertext)  # Convertir el texto cifrado en una lista de bytes
    expanded_key = key_expansion(key)  # Expansión de la clave

    # Primera ronda de descifrado
    state = add_round_key(state, expanded_key[160:176])
    state = inv_shift_rows(state)
    state = inv_sub_bytes(state)

    # 9 rondas de descifrado
    for round in range(9, 0, -1):
        state = add_round_key(state, expanded_key[round*16:(round+1)*16])
        state = inv_shift_rows(state)
        state = inv_sub_bytes(state)

    # Última ronda de descifrado
    state = add_round_key(state, expanded_key[:16])
    return state

# Convertir bytes en texto
def bytes_to_text(byte_array):
    return ''.join([chr(b) for b in byte_array if b != 0])

# Función principal con texto predefinido
if __name__ == "__main__":
    # Texto predefinido
    input_text = "Hola AES!"

    # Convertir el texto a bytes
    plaintext = [ord(c) for c in input_text]

    # Rellenar con ceros si es necesario para que sean 16 bytes
    if len(plaintext) < 16:
        plaintext += [0x00] * (16 - len(plaintext))
    elif len(plaintext) > 16:
        plaintext = plaintext[:16]  # Truncar si es más largo de 16 bytes

    print("Texto original:", bytes_to_text(plaintext))

    # Clave fija (debe tener 16 bytes)
    key = [0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c]

    # Cifrado
    encrypted_block = aes_encrypt_block(plaintext, key)
    print("Texto cifrado (en bytes):", encrypted_block)

    # Descifrado
    decrypted_block = aes_decrypt_block(encrypted_block, key)
    print("Texto descifrado:", bytes_to_text(decrypted_block))
